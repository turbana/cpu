Sections:
 - Fetch
 - Hazard
 - Decode
 - Decode Control
 - Register File
 - Execute
 - Execute Control
 - Forward
 - Skip
 - Interrupts
 - Memory
 - Memory Control



FETCH
================================================================================
 > E_J
 > H_Latch
 > E_D
 - Bus
 < F_I
 < F_PC
--------------------------------------------------------------------------------
pc1  := PC + 1
PC   := mux16(E_J : H_Latch, 00=pc1, 01=PC, 10=E_D, 11=E_D)
B_A  := 1 : PC
B_R  := 1
B_W  := 0
F_I  := B_D (high-Z)
F_PC := PC



HAZARD
================================================================================
 > D_Rd
 > D_Mr
 > C_Ra
 > D_Rb
 > D_Rc
 < H_Latch
--------------------------------------------------------------------------------
a  := ~(C_Ra ^ D_Rd)
b  := ~(D_Rb ^ D_Rd)
c  := ~(D_Rc ^ D_Rd)
nz := D_Rd[0] | D_Rd[1] | D_Rd[2] | D_Rd[3]
H_Latch := D_Mr & nz & (a | b | c)



DECODE
================================================================================
 > D_I
 > F_PC
 > R_A
 > R_B
 > R_C
 < D_Ra
 < D_Rb
 < D_Rc
 < D_Rd
 < D_PC
 < D_J
 < D_Mr
 < D_Mw
 < D_Mt
 < D_S
 < D_Snz
 < D_C
 < D_ALUop
 < D_A
 < D_B
--------------------------------------------------------------------------------
TODO



DECODE CONTROL 1
================================================================================
 > F_I
 > H_Latch
 > I_I
 < D_I
--------------------------------------------------------------------------------
D_I := mux16(I_I : H_Latch, 00=F_I, 01=0x0000, 10=0x5800, 11=0x5800) (5800 = jmp $0)



DECODE CONTROL 2
================================================================================
 > I_I
 > D_Ra
 < C_Ra
--------------------------------------------------------------------------------
C_Ra := mux4(I_I, 0=D_Ra, 1=0xB) (read from $isr)



REGISTER FILE
================================================================================
 > C_Ra
 > D_Rb
 > D_Rc
 > M_D
 > M_Rd
 > I_I
 > E_PC (EPC)
 < R_A
 < R_B
 < R_C
 < R_IE
--------------------------------------------------------------------------------
TODO



EXECUTE
================================================================================
 > D_ALUop
 > F_A
 > F_B
 < E_D
 < E_Z
 < E_PC
 < E_Mt
 < E_Snz
--------------------------------------------------------------------------------
TODO
E_PC  := D_PC
E_Mt  := D_Mt
E_Snz := D_Snz



EXECUTE CONTROL
================================================================================
 > M_S
 > D_Rd
 > D_PC
 > D_J
 > D_Mr
 > D_Mw
 > D_S
 < E_Rd
 < E_J
 < E_Mr
 < E_Mw
 < E_S
--------------------------------------------------------------------------------
E_Rd := mux4(M_S, 0=D_Rd, 1=0)
E_J  := mux1(M_S, 0=D_J,  1=0)
E_Mr := mux1(M_S, 0=D_Mr, 1=0)
E_Mw := mux1(M_S, 0=D_Mw, 1=0)
E_S  := mux1(M_S, 0=D_S,  1=0)



FORWARD
================================================================================
 > D_A
 > D_B
 > D_C
 > D_Ra
 > D_Rb
 > D_Rc
 > E_Rd
 > E_D
 > M_Rd
 > M_D
 < F_A
 < F_B
 < E_C
--------------------------------------------------------------------------------
ea  := E_Rd ^ D_Ra
ma  := M_Rd ^ D_Ra
eb  := E_Rd ^ D_Rb
mb  := M_Rd ^ D_Rb
ec  := E_Rd ^ D_Rc
mc  := M_Rd ^ D_Rc
F_A := mux16(ea : ma, 00=E_D, 01=E_D, 10=M_D, 11=D_A)
F_B := mux16(eb : mb, 00=E_D, 01=E_D, 10=M_D, 11=D_B)
E_C := mux16(ec : mc, 00=E_D, 01=E_D, 10=M_D, 11=D_C)



SKIP
================================================================================
 > E_S
 > E_Snz
 > E_Z
 < S_S
--------------------------------------------------------------------------------
S_S := E_S & ~(E_Snz ^ E_Z)



INTERRUPTS
================================================================================
 > PIC_I
 > E_D
 > R_IE
 > M_RdOld
 > M_D
 > E_Mr
 > E_Mw
 > E_Rd
 > E_J (TODO update drawing)
 > E_S (TODO update drawing)
 > E_Mt (TODO update drawing)
 < I_I
 < I_Mr
 < I_Mw
 < I_D
 < PIC_Ack
 < M_Rd
 < I_Mt (TODO update drawing)
--------------------------------------------------------------------------------
ief  := M_RdOld ^ 9 ($flags)
ie   := mux1(ief, 0=M_D[0], 1=R_IE)
inst := (E_Rd[0] | E_Rd[1] | E_Rd[2] | E_Rd[3]) | E_S | E_Mr | E_Mw | E_J
I_I  := ie & PIC_I & inst
I_Mr :=  mux1(I_I, 0=E_Mr, 1=1)
I_Mw :=  mux1(I_I, 0=E_Mw, 1=0)
I_Mt :=  mux1(I_I, 0=E_Mt, 1=0)
I_D  := mux16(I_I, 0=E_D,  1=0xFF80) (PIC address)
M_Rd :=  mux4(I_I, 0=E_Rd, 1=0xB) ($isr)
PIC_Ack := I_I (TODO Pulse?)



MEMORY
================================================================================
 > E_C
 > I_Mt
 > I_Mr
 > I_Mw
 > I_D
 - Bus
 < M_D
--------------------------------------------------------------------------------
B_A := I_Mt : I_D
B_R := I_Mr
B_W := I_Mw
if(I_Mw) { B_D := E_C (drive) }
else     { B_D := high-Z }
M_D := mux16(I_Mr, 0=I_D, 1=B_D)



MEMORY CONTROL
================================================================================
 > I_I
 > S_S
 < M_S
--------------------------------------------------------------------------------
M_S := S_S | I_I
