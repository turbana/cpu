#!/usr/bin/python

"""
Fixes verilog code generated by the netlister.
  1. Changes Vcc/GND from wires into supply1/supply0 respectively
  2. Suppresses identical input declarations for modules
  3. Set module name
  4. Set module parameters
"""

import sys
import StringIO
import os.path
import schematic


def main(args):
    if len(args) != 2:
        print "USAGE: %s module.v module.sch" % sys.argv[0]
        print "Fixes netlisted verilog code"
        return 2
    filename = args[0]
    schem = schematic.Schematic(open(args[1]))
    modname = os.path.basename(filename[:-2])
    out_stream = StringIO.StringIO()
    with open(filename) as in_stream:
        fixup(in_stream, out_stream, modname, schem)
    out_stream.seek(0)
    with open(filename, "w") as new_stream:
        map(new_stream.write, out_stream)


def fixup(in_stream, out_stream, modname, schem):
    wireset = []
    checking_wires = False
    def pretty_pad(pad):
        s = pad.netlabel
        return s[:s.find("[")] if "[" in s else s
    for line in in_stream:
        line = line.replace("wire GND ;", "supply0 GND ;")
        line = line.replace("wire Vcc ;", "supply1 Vcc ;")
        wire = line.strip(",\n")
        if checking_wires and wire in wireset:
            continue
        elif line.startswith("module"):
            out_stream.write("module %s (\n" % modname)
            params = ",\n\t".join(map(pretty_pad, schem.findall(basename="[io]pad-1.sym")))
            out_stream.write("\t" + params)
            # if we have *pad-2.sym's we already have some parameters from netlisting: ensure we end in a comma
            if list(schem.findall(basename="[io]pad-2.sym")):
                out_stream.write(",\n")
        elif line == "/* Port directions begin here */\n":
            out_stream.write(line)
            def show(pad):
                dir = "input" if pad.device == "IPAD" else "output"
                name = pretty_pad(pad)
                width = pad.netlabel.replace(name, "")
                out_stream.write("%s %s %s;\n" % (dir, width, name))
            map(show, schem.findall(basename="ipad-1.sym"))
            map(show, schem.findall(basename="opad-1.sym"))
        elif line.endswith(" ( \n"):
            out_stream.write(line)
            checking_wires = True
        elif line.endswith(");\n"):
            if checking_wires:
                out_stream.write(",\n".join(wireset) + "\n")
                checking_wires = False
                wireset = []
            out_stream.write(line)
        elif checking_wires:
            wireset.append(wire)
        else:
            out_stream.write(line)


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
