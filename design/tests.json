{
	"clock": {
		"values": [
			"@0.25 CLK0:1 = 1",
			"@0.25 CLK1:1 = 0",
			"@0.25 CLK2:1 = 0",
			"@0.25 CLK3:1 = 0",
			"@0.50 CLK0:1 = 1",
			"@0.50 CLK1:1 = 0",
			"@0.50 CLK2:1 = 1",
			"@0.50 CLK3:1 = 0",
			"@0.75 CLK0:1 = 0",
			"@0.75 CLK1:1 = 1",
			"@0.75 CLK2:1 = 0",
			"@0.75 CLK3:1 = 0",
			"@1.00 CLK0:1 = 0",
			"@1.00 CLK1:1 = 1",
			"@1.00 CLK2:1 = 0",
			"@1.00 CLK3:1 = 1"
		]
	},
	"decode_control": {
		"inputs": {
			"H_H":  {"width": 1},
			"I_I":  {"width": 1},
			"EM_J": {"width": 1},
			"D_Rd": {"width": 4},
			"D_T":  {"width": 1},
			"D_J":  {"width": 1},
			"D_Mr": {"width": 1},
			"D_Mw": {"width": 1},
			"D_S":  {"width": 1}
		},
		"values": [
			"nop = I_I | H_H | EM_J",
			"DC_Rd:4 = 0 if nop else D_Rd",
			"DC_T:1 = 0 if nop else D_T",
			"DC_J:1 = 0 if nop else D_J",
			"DC_Mr:1 = 0 if nop else D_Mr",
			"DC_Mw:1 = 0 if nop else D_Mw",
			"DC_S:1 = 0 if nop else D_S"
		]
	},
	"decode_decode": {
		"inputs": {
			"FD_I": {"width": 16},
			"R_A":  {"width": 16},
			"R_B":  {"width": 16}
		},
		"values": ["PLACEHOLDER: filled in from tests-decode.json"]
	},
	"decode_hazard": {
		"inputs": {
			"EM_J":  {"width": 1},
			"DE_Mr": {"width": 1},
			"DE_Rd": {"width": 4},
			"D_Ra":  {"width": 4},
			"D_Rb":  {"width": 4}
		},
		"values": [
			"ma = 1 if DE_Rd == D_Ra else 0",
			"mb = 1 if DE_Rd == D_Rb else 0",
			"zero = 1 if DE_Rd == 0 else 0",
			"match = ~zero & (ma | mb)",
			"H_H:1 = DE_Mr & match & ~EM_J"
		]
	},
	"decode_rf": {
		"inputs": {
			"I_D":   {"width": 16},
			"I_Rd":  {"width": 4},
			"I_I":   {"width": 1},
			"FD_PC": {"width": 16},
			"D_Ra":  {"width": 4},
			"D_Rb":  {"width": 4}
		},
		"initial": {
			"rf": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
			"PC": 8,
			"FLAGS": 9,
			"EPC": 10,
			"EFLAGS": 11
		},
		"values": [
			"sup_mode = rf[FLAGS] & 2 == 0",
			"gp_reg = I_Rd < 8",
			"ignore = I_Rd in (FLAGS, EFLAGS) and I_I",
			"rf[EFLAGS] = rf[FLAGS] if I_I else rf[EFLAGS]",
			"rf[FLAGS] = 0 if I_I else rf[FLAGS]",
			"rf[I_Rd] = I_D if not ignore and (sup_mode or gp_reg or I_I) else rf[I_Rd]",
			"R_IE:1 = rf[FLAGS] >> 0",
			"R_M:1  = rf[FLAGS] >> 1",
			"R_CS:6 = rf[FLAGS] >> 4",
			"R_DS:6 = rf[FLAGS] >> 10",
			"R_A:16 = DONTCARE if D_Ra in (12, 13, 14, 15) else (0 if D_Ra==0 else (FD_PC if D_Ra==PC else rf[D_Ra]))",
			"R_B:16 = DONTCARE if D_Rb in (12, 13, 14, 15) else (0 if D_Rb==0 else (FD_PC if D_Rb==PC else rf[D_Rb]))"
		]
	},
	"execute_alu": {
		"inputs": {
			"F_A":      {"width": 16, "alias": "a"},
			"F_B":      {"width": 16, "alias": "b"},
			"DE_Ca":    {"width": 1, "alias": "ca"},
			"DE_ALUop": {"width": 3, "alias": "op"}
		},
		"assert": "op != 7",
		"values": [
			"A_D:16 = a+b+ca if op==0 else (a&b if op==1 else (a|b if op==2 else (a^b if op==3 else _E_S)))",
			"sa = a >> 15",
			"sb = b >> 15",
			"sr = A_D >> 15",
			"cf = (a+b) >> 16",
			"of = (~sa & ~sb & sr) | (sa & sb & ~sr)",
			"zf = 1 if A_D==0 else 0",
			"A_F:4 = (sr << 3) | (cf << 2) | (of << 1) | zf"
		]
	},
	"execute_alu_bs": {
		"inputs": {
			"F_A":      {"width": 16, "alias": "a"},
			"F_B":      {"width": 16, "alias": "b"},
			"DE_ALUop": {"width": 3, "alias": "op"}
		},
		"assert": "(op & 3) != 3",
		"values": [
			"s = b & 0xF",
			"r = (~op & 2) >> 1",
			"ar = op & 1",
			"_E_S:16 = ((a>>s)|((2**16 - 2**(16-s)) * (a>>15))) if r and ar else ((a>>s) if r else (a<<s))"
		]
	},
	"execute_forward": {
		"inputs": {
			"DE_A":  {"width": 16},
			"DE_Ra": {"width": 4},
			"DE_B":  {"width": 16},
			"DE_Rb": {"width": 4},
			"DE_C":  {"width": 16},
			"DE_Rc": {"width": 4},
			"EM_D":  {"width": 16},
			"EM_Rd": {"width": 4},
			"MW_D":  {"width": 16},
			"MW_Rd": {"width": 4}
		},
		"values": [
			"ea = EM_Rd ^ DE_Ra == 0 and DE_Ra != 0",
			"ma = MW_Rd ^ DE_Ra == 0 and DE_Ra != 0",
			"eb = EM_Rd ^ DE_Rb == 0 and DE_Rb != 0",
			"mb = MW_Rd ^ DE_Rb == 0 and DE_Rb != 0",
			"ec = EM_Rd ^ DE_Rc == 0 and DE_Rc != 0",
			"mc = MW_Rd ^ DE_Rc == 0 and DE_Rc != 0",
			"F_A:16 = EM_D if ea else (MW_D if ma else DE_A)",
			"F_B:16 = EM_D if eb else (MW_D if mb else DE_B)",
			"F_C:16 = EM_D if ec else (MW_D if mc else DE_C)"
		]
	},
	"execute_control": {
		"inputs": {
			"R_IE":  {"width": 1},
			"EM_J":  {"width": 1},
			"I_I":   {"width": 1},
			"I_T":   {"width": 1},
			"PIC_I": {"width": 1},
			"S_S":   {"width": 1},
			"DE_Rd": {"width": 4},
			"DE_T":  {"width": 1},
			"DE_J":  {"width": 1},
			"DE_Mr": {"width": 1},
			"DE_Mw": {"width": 1},
			"DE_Mt": {"width": 1},
			"DE_S":  {"width": 1},
			"A_D":   {"width": 16}
		},
		"assert": "not (I_T & ~I_I)",
		"values": [
			"valid_op = DE_J | DE_S | DE_Mr | DE_Mw | (1 if DE_Rd else 0)",
			"brk = I_I",
			"trap = I_T",
			"sint = R_IE & PIC_I & valid_op & ~S_S & ~EM_J",
			"skip = sint | S_S | EM_J",
			"EC_Rd:4 = 8 if brk else (0 if skip else DE_Rd)",
			"EC_T:1 = 0 if brk else (0 if skip else DE_T)",
			"EC_I:1 = 0 if brk else (sint if skip else 0)",
			"EC_J:1 = 0 if brk else (0 if skip else DE_J)",
			"EC_Mr:1 = 1 if brk else (0 if skip else DE_Mr)",
			"EC_Mw:1 = 0 if brk else (0 if skip else DE_Mw)",
			"EC_Mt:1 = 1 if brk else (DONTCARE if skip else DE_Mt)",
			"EC_S:1 = 0 if brk else (0 if skip else DE_S)",
			"EC_D:16 = (0xC000 if trap else 0xFF80) if brk else (DONTCARE if skip else A_D)"
		]
	},
	"fetch_control": {
		"inputs": {
			"F_I":  {"width": 16},
			"EM_J": {"width": 1},
			"I_I":  {"width": 1}
		},
		"values": [
			"FC_I:16 = 0 if EM_J|I_I else F_I"
		]
	},
	"fetch_fetch": {
		"inputs": {
			"R_CS":  {"width": 6},
			"R_M":   {"width": 1},
			"F_PC":  {"width": 16},
			"BUS_D": {"width": 16, "clock": "CLK1", "delay": 10}
		},
		"values": [
			"_BUS_D = BUS_D",
			"seg = R_CS if R_M else 0",
			"@0.50 BUS_A:23 = Z",
			"@0.50 BUS_D:16 = Z",
			"@0.50 BUS_R:1 = Z",
			"@0.50 BUS_W:1 = Z",
			"@1.00 BUS_A:23 = (1 << 22) | (seg << 16) | F_PC",
			"@1.00 BUS_D:16 = _BUS_D",
			"@1.00 BUS_R:1 = 1",
			"@1.00 BUS_W:1 = 0",
			"@1.00 F_I:16 = BUS_D"
		]
	},
	"fetch_pc": {
		"inputs": {
			"EM_J": {"width": 1},
			"H_H": {"width": 1},
			"EM_D": {"width": 16}
		},
		"initial": {
			"F_PC": 0
		},
		"values": [
			"F_PC:16 = EM_D if EM_J else (F_PC if H_H else F_PC+1)"
		]
	},
	"memory_control": {
		"inputs": {
			"EM_Mr": {"width": 1},
			"EM_Mw": {"width": 1},
			"EM_Rd": {"width": 4},
			"I_I":   {"width": 1}
		},
		"values": [
			"reti = EM_Mr & EM_Mw",
			"nop = I_I | reti",
			"MC_Ir:1 = reti",
			"MC_Rd:4 = 0 if I_I else EM_Rd",
			"MC_Mr:1 = 0 if nop else EM_Mr",
			"MC_Mw:1 = 0 if nop else EM_Mw"
		]
	},
	"memory_memory": {
		"inputs": {
			"EM_D":  {"width": 16},
			"EM_C":  {"width": 16},
			"EM_Mt": {"width": 1},
			"MC_Mr": {"width": 1},
			"MC_Mw": {"width": 1},
			"MC_Ir": {"width": 1},
			"R_DS":  {"width": 6},
			"R_CS":  {"width": 6},
			"BUS_D": {"width": 16, "clock": "CLK0 & MC_Mr", "delay": 10}
		},
		"assert": "not (MC_Mr and MC_Mw)",
		"values": [
			"_BUS_D = BUS_D",
			"seg = R_CS if EM_Mt else R_DS",
			"nop = not (MC_Mr or MC_Mw)",
			"@0.25 BUS_A:23 = (EM_Mt << 22) | (seg << 16) | EM_D",
			"@0.25 BUS_R:1 = MC_Mr",
			"@0.25 BUS_W:1 = MC_Mw",
			"@0.25 BUS_D:16 = DONTCARE if nop else (EM_C if MC_Mw else _BUS_D)",
			"@0.50 BUS_A:23 = (EM_Mt << 22) | (seg << 16) | EM_D",
			"@0.50 BUS_R:1 = MC_Mr",
			"@0.50 BUS_W:1 = MC_Mw",
			"@0.50 BUS_D:16 = DONTCARE if nop else (EM_C if MC_Mw else _BUS_D)",
			"@0.50 M_D:16 = EM_C if MC_Ir else _BUS_D if MC_Mr else EM_D",
			"@0.75 BUS_A:23 = Z",
			"@0.75 BUS_R:1 = Z",
			"@0.75 BUS_W:1 = Z",
			"@0.75 BUS_D:16 = Z",
			"@1.00 BUS_A:23 = Z",
			"@1.00 BUS_R:1 = Z",
			"@1.00 BUS_W:1 = Z",
			"@1.00 BUS_D:16 = Z",
			"M_D:16 = EM_C if MC_Ir else _BUS_D if MC_Mr else EM_D"
		]
	},
	"memory_skip": {
		"inputs": {
			"EM_S":   {"width": 1},
			"EM_SF":  {"width": 3},
			"EM_AF":  {"width": 4}
		},
		"values": [
			"ZF = (EM_AF >> 0) & 1",
			"OF = (EM_AF >> 1) & 1",
			"CF = (EM_AF >> 2) & 1",
			"SF = (EM_AF >> 3) & 1",
			"conds = [None]*8",
			"conds[0] = ZF==1",
			"conds[1] = ZF==0",
			"conds[2] = ZF==0 and SF==OF",
			"conds[3] = SF==OF",
			"conds[4] = SF!=OF",
			"conds[5] = ZF==1 or SF!=OF",
			"conds[6] = CF==0",
			"conds[7] = CF==ZF",
			"S_S:1 = EM_S & conds[EM_SF]"
		]
	},
	"writeback_interrupts": {
		"inputs": {
			"MW_PC": {"width": 16},
			"MW_Rd": {"width": 4},
			"MW_T":  {"width": 1},
			"MW_I":  {"width": 1},
			"MW_D":  {"width": 16},
			"MW_IE":  {"width": 1}
		},
		"values": [
			"int = MW_I & MW_IE",
			"trap = MW_T & MW_IE",
			"I_I:1 = int | trap",
			"I_T:1 = trap",
			"I_D:16 = MW_PC if int | trap else MW_D",
			"I_Rd:4 = 10 if int | trap else MW_Rd"
		]
	},
	"proto": {
		"inputs": {
			"A":   {"width": 4, "alias": "a"},
			"B":   {"width": 4, "alias": "b"},
			"Op":  {"width": 2, "alias": "op"},
			"Cin": {"width": 1}
		},
		"values": [
			"D:4 = a+b+Cin if op==0 else (a&b if op==1 else (a|b if op==2 else a^b))",
			"Cout:1 = (a+b+Cin)>>4 if op==0 else DONTCARE"
		]
	}
}
