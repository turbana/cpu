{
	"execute_alu": {
		"inputs": {
			"F_A":      {"width": 16, "alias": "a"},
			"F_B":      {"width": 16, "alias": "b"},
			"DE_ALUop": {"width": 3, "alias": "op"}
		},
		"assert": "op != 7",
		"values": [
			"A_D:16 = a+b if op==0 else (a&b if op==1 else (a|b if op==2 else (a^b if op==3 else _E_S)))",
			"A_Z:1 = 1 if A_D==0 else 0"
		]
	},
	"execute_alu_bs": {
		"inputs": {
			"F_A":      {"width": 16, "alias": "a"},
			"F_B":      {"width": 16, "alias": "b"},
			"DE_ALUop": {"width": 3, "alias": "op"}
		},
		"assert": "(op & 3) != 3",
		"values": [
			"s = b & 0xF",
			"r = (~op & 2) >> 1",
			"ar = op & 1",
			"_E_S:16 = ((a>>s)|((2**16 - 2**(16-s)) * (a>>15))) if r and ar else ((a>>s) if r else (a<<s))"
		]
	},
	"execute_forward": {
		"inputs": {
			"DE_A":  {"width": 16},
			"DE_Ra": {"width": 4},
			"DE_B":  {"width": 16},
			"DE_Rb": {"width": 4},
			"DE_C":  {"width": 16},
			"DE_Rc": {"width": 4},
			"EM_D":  {"width": 16},
			"EM_Rd": {"width": 4},
			"MW_D":  {"width": 16},
			"MW_Rd": {"width": 4}
		},
		"values": [
			"ea = EM_Rd ^ DE_Ra == 0 and DE_Ra != 0",
			"ma = MW_Rd ^ DE_Ra == 0 and DE_Ra != 0",
			"eb = EM_Rd ^ DE_Rb == 0 and DE_Rb != 0",
			"mb = MW_Rd ^ DE_Rb == 0 and DE_Rb != 0",
			"ec = EM_Rd ^ DE_Rc == 0 and DE_Rc != 0",
			"mc = MW_Rd ^ DE_Rc == 0 and DE_Rc != 0",
			"F_A:16 = EM_D if ea else (MW_D if ma else DE_A)",
			"F_B:16 = EM_D if eb else (MW_D if mb else DE_B)",
			"F_C:16 = EM_D if ec else (MW_D if mc else DE_C)"
		]
	},
	"execute_control": {
		"inputs": {
			"R_IE":  {"width": 1},
			"EM_J":  {"width": 1},
			"I_I":   {"width": 1},
			"I_T":   {"width": 1},
			"PIC_I": {"width": 1},
			"S_S":   {"width": 1},
			"DE_Rd": {"width": 4},
			"DE_T":  {"width": 1},
			"DE_J":  {"width": 1},
			"DE_Mr": {"width": 1},
			"DE_Mw": {"width": 1},
			"DE_Mt": {"width": 1},
			"DE_S":  {"width": 1},
			"A_D":   {"width": 16}
		},
		"values": [
			"valid_op = DE_J | DE_S | DE_Mr | DE_Mw | (1 if DE_Rd else 0)",
			"int = I_I",
			"trap = I_T",
			"brk = int | trap",
			"sint = R_IE & PIC_I & valid_op & ~S_S & ~EM_J",
			"skip = sint | S_S | EM_J",
			"EC_Rd:4 = 8 if brk else (0 if skip else DE_Rd)",
			"EC_T:1 = 0 if brk else (0 if skip else DE_T)",
			"EC_I:1 = 0 if brk else (sint if skip else 0)",
			"EC_J:1 = 0 if brk else (0 if skip else DE_J)",
			"EC_Mr:1 = 1 if brk else (0 if skip else DE_Mr)",
			"EC_Mw:1 = 0 if brk else (0 if skip else DE_Mw)",
			"EC_Mt:1 = 1 if brk else (DONTCARE if skip else DE_Mt)",
			"EC_S:1 = 0 if brk else (0 if skip else DE_S)",
			"EC_D:16 = (0xFF80 if int else 0xC000) if brk else (DONTCARE if skip else A_D)"
		]
	},
	"memory_skip": {
		"inputs": {
			"EM_S":   {"width": 1},
			"EM_Snz": {"width": 1},
			"EM_Z":   {"width": 1}
		},
		"values": [
			"S_S:1 = EM_S & EM_Snz & EM_Z"
		]
	},
	"proto": {
		"inputs": {
			"A":   {"width": 4, "alias": "a"},
			"B":   {"width": 4, "alias": "b"},
			"Op":  {"width": 2, "alias": "op"},
			"Cin": {"width": 1}
		},
		"values": [
			"D:4 = a+b+Cin if op==0 else (a&b if op==1 else (a|b if op==2 else a^b))",
			"Cout:1 = (a+b+Cin)>>4 if op==0 else DONTCARE"
		]
	}
}
