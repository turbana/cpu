* TIM-16
TIM-16 will be a custom designed computer, built from 74 series CMOS logic
chips.

- [[doc/block_diagram.png?raw=true][Block Diagram]]
- [[doc/schematics.pdf?raw=true][Schematics]]

** Progress
- *Architecture* =[Done]= Always reviewing, but mostly static.
- *Instruction Set* =[Done]=
- *Assembler* =[Done]=
- *Functional Simulator* =[Done]=
- *Assembler Tests* =[Mostly Done]= Need to add additional tests.
- *Schematic Capture* =[Mostly Done]= Devices/interrupts are unfinished.
- *Behavioral Simulator* =[In Progress]= Fuzz tests for captured schematics.
  Full simulator will be written once capture is complete.
- *Verification* =[Started]= Will be able to use assembler tests, but
  additional tests should be written.
- *Construction* =[Not Started]=

** Architecture
- 5 stage pipelined RISC architecture.
- 16 bit ALU.
- 8x 16 bit general purpose registers.
- 4x control registers.
- System bus is 23 bits wide with word addressing (16MB of memory).
- Precise external interrupts using an 8259A PIC.
- No support for exceptions or control codes.
- Memory mapped IO with support for 2 serial ports, an IDE hard disk, and a 555
  timer with room to expand.
- User/Supervisor modes.
- Segmentation as a memory protection scheme.
- Separate data and instruction memories.
- 23 bit physical addressing divided into 64 segments, each with 64k words of
  instruction and data memory.

** Instruction Set
Most instructions are 3 register instructions where the 2nd operand can be
replaced with a 4 bit special signed immediate. Non-negative immediate values
are added with 1 while negative immediates are unchanged, giving the range [
=-8= -- =-1=, =1= -- =8= ]. Register =$0= is hardwired to return 0.

Effort was made to use relative addressing modes to encourage PC independent
code. Two jump instructions support both base + index and PC-relative
addressing. Data accesses support base + index and base + offset, while
instruction accesses support only base + index. Absolute addressing must first
load an address into a register.

TIM does not have a conditional jump instruction or condition codes. Instead,
jumps placed in the shadow of a skip are used for conditional execution.

Two instructions are required to load a 16 bit immediate value. =lui= is used to
load the upper 8 bits of a register followed by an =addi= to populate the lower
8 bits. =addi= takes a signed number so care must be taken when the high bit of
the low order byte is set. The assembler macro =.ldi= performs the necessary
steps.

| Inst     | Form                  | Meaning                                                           |
|----------+-----------------------+-------------------------------------------------------------------|
| add      | r1, r2, [r3\vert{}sp] | r1 \gets r2 + r3                                                  |
| sub      | r1, r2, [r3\vert{}sp] | r1 \gets r2 - r3                                                  |
| and      | r1, r2, [r3\vert{}sp] | r1 \gets r2 & r3                                                  |
| or       | r1, r2, [r3\vert{}sp] | r1 \gets r2 \vert r3                                              |
| xor      | r1, r2, [r3\vert{}sp] | r1 \gets r2 ^ r3                                                  |
| shl      | r1, r2, [r3\vert{}sp] | r1 \gets r2 << r3                                                 |
| shr      | r1, r2, [r3\vert{}sp] | r1 \gets r2 >> r3                                                 |
| sar      | r1, r2, [r3\vert{}sp] | r1 \gets r2 >>> r3                                                |
| as.z     | r1, r2, [r3\vert{}sp] | r1 \gets r2 + r3; skip next if r1 == 0                            |
| as.nz    | r1, r2, [r3\vert{}sp] | r1 \gets r2 + r3; skip next if r1 != 0                            |
| s.{cond} | r1, [r2\vert{}sp]     | skip next if (r1 <cond> r2)                                       |
| jmp      | [r1\vert{}sp](r2)     | pc \gets r1 + r2                                                  |
| jmp      | imm11                 | pc \gets pc + imm                                                 |
| ldw      | r1, imm7(r2)          | r1 \gets Md[r2 + imm]                                             |
| ldw      | r1, [r2\vert{}sp](r3) | r1 \gets Md[r2 + r3]                                              |
| ldiw     | r1, [r2\vert{}sp](r3) | r1 \gets Mi[r2 + r3]                                              |
| stw      | imm7(r1), r2          | Md[r1 + imm] \gets r2                                             |
| stw      | [r1\vert{}sp](r2), r3 | Md[r1 + r2] \gets r3                                              |
| stiw     | [r1\vert{}sp](r2), r3 | Mi[r1 + r2] \gets r3                                              |
| lui      | r1, uimm8             | r1 \gets imm << 8                                                 |
| addi     | r1, imm8              | r1 \gets r1 + imm (sign extended)                                 |
| lcr      | r1, cr1               | r1 \gets cr1                                                      |
| scr      | cr1, r1               | cr1 \gets r1                                                      |
| trap     |                       | Enter supervisor mode; disable interrupts; jump to kernel routine |
| halt     |                       | Execution halts                                                   |
| iret     |                       | Enter user mode; enable interrupts; jump to =$epc=                |

***** Conditionals
| s.eq   | ==          |
| s.ne   | !=          |
| s.gt   | >           |
| s.gte  | >=          |
| s.lt   | <           |
| s.lte  | <=          |
| s.ult  | unsigned <  |
| s.ulte | unsigned <= |

** Registers
*** General Purpose Registers
| Register | Alias | Writable | Meaning                          |
|----------+-------+----------+----------------------------------|
| $0       |       | No       | Always reads 0                   |
| $1       |       | Yes      | General Purpose                  |
| $2       |       | Yes      | General Purpose                  |
| $3       |       | Yes      | General Purpose                  |
| $4       |       | Yes      | General Purpose                  |
| $5       |       | Yes      | General Purpose                  |
| $6       | $fp   | Yes      | Frame/Link Pointer by convention |
| $7       | $sp   | Yes      | Stack Pointer by convention      |

*** Control Registers
Control Registers can only be accessed with =lcr= / =scr= instructions. With the
exception of =$pc=, control registers can only be accessed in supervisor mode.
Illegal reads and writes are ignored.

| Register | Alias   | Writable | Mode       | Meaning                     |
|----------+---------+----------+------------+-----------------------------|
| $cr0     | $pc     | No       | Any        | Program Counter             |
| $cr1     | $flags  | Yes      | Supervisor | Processor Flags (see below) |
| $cr2     | $epc    | Yes      | Supervisor | Exceptional Program Counter |
| $cr3     | $eflags | Yes      | Supervisor | Exceptional Flags           |

**** $cr1 - Flags Register
| Bit | Name | Meaning                                     |
|-----+------+---------------------------------------------|
|   0 | IE   | 0=Interrupts Disabled; 1=Interrupts Enabled |
|   1 | M    | 0=Supervisor Mode; 1=User Mode              |
|   2 |      | Reserved                                    |
|   3 |      | Reserved                                    |
|   4 | CS0  | Code Segment (low bit)                      |
|   5 | CS1  | \vert{}                                     |
|   6 | CS2  | \vert{}                                     |
|   7 | CS3  | \vert{}                                     |
|   8 | CS4  | \vert{}                                     |
|   9 | CS5  | Code Segment (high bit)                     |
|  10 | DS0  | Data Segment (low bit)                      |
|  11 | DS1  | \vert{}                                     |
|  12 | DS2  | \vert{}                                     |
|  13 | DS3  | \vert{}                                     |
|  14 | DS4  | \vert{}                                     |
|  15 | DS5  | Data Segment (high bit)                     |

** Memory
Segmentation is used for memory protection. The corresponding segment
(instruction/data found in =$flags=) is concatenated with the logical address
(and memory type), forming the physical address that is sent across the bus.
Each process is assigned it's own code and data segments. Segments can only be
modified from supervisor mode, isolating processes from one another. Segment 0
is considered the supervisor's segment and all devices are memory mapped onto
data segment 0. To support accessing an arbitrary segment's instruction memory,
instruction fetch is hardwired to segment 0 while in supervisor mode.

*** Data Memory Layout
| 0x00 0000 | RAM         |
| 0x00 FF7F |             |
| 0x00 FF80 | PIC         |
| 0x00 FF8F |             |
| 0x00 FF90 | UART0       |
| 0x00 FF9F |             |
| 0x00 FFA0 | UART1       |
| 0x00 FFAF |             |
| 0x00 FFB0 | 555 timer   |
| 0x00 FFBF |             |
| 0x00 FFC0 | IDE         |
| 0x00 FFCF |             |
| 0x00 FFD0 | Front Panel |
| 0x00 FFDF |             |
| 0x00 FFE0 | Reserved    |
| 0x00 FFFF |             |
| 0x01 0000 | RAM         |
| 0x3F FFFF |             |

*** Instruction Memory Layout
| 0x00 0000 | RAM    |
| 0x00 DFFF |        |
| 0x00 E000 | EEPROM |
| 0x00 FFFF |        |
| 0x01 0000 | RAM    |
| 0x3F FFFF |        |
