;;
;; Test ISA
;;
; TODO add memory tests
;
; final check |@| 258 ($1=F00D)

	.data
n:	.dw	0xABCD
m:	.dw	0x0000
	.zero	32
sbp:

	.text
	.ldi	$4, n			; $4 = &n			|@|   3 ($4=0000)
	.ldi	$6, m			; $6 = &m			|@|   5 ($6=0001)
	add	$5, $0, 2		; $5 = 2			|@|   6 ($5=0002)
					;
1:	ldw	$1, 0($4)		; $1 = n			|@|   7 ($1=ABCD)
	stw	0($6), $1		;  m = n			<memory test>
	shl	$2, $1, 8		; $2 = n << 8			|@|   9 ($2=CD00)
	shr	$3, $1, 8		; $3 = n >> 8			|@|  10 ($3=00AB)
	or	$1, $3, $2		; $1 = $3 | $2			|@|  11 ($1=CDAB)
	stw	0($4), $1		;  n = $1			<memory test>
	as.z	$5, $5, -1		; $5 -= 1; loop until 0		|@|  13 ($5=0001)
	jmp	1b			;				|@|  14 ($5=0001)
					;				|@|  21 ($1=ABCD $2=AB00 $3=00CD $5=0000)
	ldw	$1, 0($4)		; $1 = n (0xABCD)		|@|  22 ($1=ABCD)
	ldw	$2, 0($6)		; $2 = m (0xCDAB)		|@|  23 ($2=CDAB)
	sub	$3, $0, -4		; $3 = 4			|@|  24 ($3=0004)
1:	shl	$1, $1, 1		; $1 <<= 1			|@|  25 ($1=579A)
	shr	$2, $2, 1		; $2 >>= 1			|@|  26 ($2=66D5)
	sub	$3, $3, 1		; $3 -= 1			|@|  27 ($3=0003)
	s.eq	$3, $0			; loop until $3 == 0
	jmp	1b			;
					;				|@|  43 ($1=BCD0 $2=0CDA $3=0000)
	or	$3, $1, $2		; $3 = $1 | $2			|@|  44 ($3=BCDA)
	stw	$0($4), $3		;  n = $3			<memory test>
	ldw	$1, $0($4)		; $1 = n			|@|  46 ($1=BCDA)
	ldw	$2, $0($6)		; $2 = m			|@|  47 ($2=CDAB)
	xor	$3, $1, $2		; $3 = 0xBCDA ^ 0xCDAB = 0x7171	|@|  48 ($3=7171)
	shl	$2, $3, 1		; $2 = $3 << 1 = 0xE2E2		|@|  49 ($2=E2E2)
	lui	$1, 0x80		; $1 = 0x8000			|@|  50 ($1=8000)
	or	$1, $1, $3		; $1 = $1 | $3 = 0xF171		|@|  51 ($1=F171)
	xor	$3, $3, $3		; $3 = $3 ^ $3 = 0		|@|  52 ($3=0000)
	sub	$3, $0, 1		; $3 = -1			|@|  53 ($3=FFFF)
	stw	0($6), $3		;  m = $3			<memory test>
	add	$3, $0, -1		; $3 = 0xFFFF			|@|  55 ($3=FFFF)
	shr	$3, $3, 8		; $3 >>= 8 = 0x00FF		|@|  56 ($3=00FF)
	sext	$2, $3			; $2 = sext $3 = 0xFFFF		|@|  57 ($2=FFFF)
	and	$1, $1, $2		; $1 = $1 & $2 = 0xF171		|@|  58 ($1=F171)
					;
	.ldi	$7, sbp			; setup stack			|@|  60 ($7=0022)
	.push	$1			; push 0xF171			|@|  62 ($7=0021)
					;				<memory test>
	sub	$7, $7, 1		; .call count_bits		|@|  63 ($7=0020)
	lcr	$5, $cr0		;				|@|  64 ($5=002B)
	add	$5, $5, 2		;				|@|  65 ($5=002D)
	stw	0($7), $5		;				<memory test>
	jmp	count_bits		;
	.pop	$2			; $2 = result = 9		|@| 180 ($2=0009)
					;				|@| 181 ($7=0022)
	xor	$3, $1, $2		; $3 = $1 ^ $2 = 0xF178		|@| 182 ($3=F178)
					;
	.ldi	$1, test		; $1 = &test			|@| 184 ($1=0034)
	lcr	$2, $cr0		; $2 = PC + 2 (&test)		|@| 185 ($2=0034)
	add	$0, $0, $0		; noop
test:	s.eq	$1, $2			; skip if same address
	add	$3, $3, $1		; scramble $3
					;				|@| 187 ($3=F178)
	shr	$3, $3, 1		; $3 >>= 1 = 0x78BC		|@| 188 ($3=78BC)
	.ldi	$5, 0x8000		; $5 = 0x8000			|@| 189 ($5=8000)
	or	$3, $3, $5		; $3 |= $5 = 0xF8BC		|@| 190 ($3=F8BC)
					;
	add	$3, $3, 1		; $3 += 1 (0xF8BD)		|@| 191 ($3=F8BD)
	ldw	$2, 0($6)		; $2 = m (0xFFFF)		|@| 192 ($2=FFFF)
	ldw	$1, 0($6)		; $1 = m (0xFFFF)		|@| 193 ($1=FFFF)
	.ldi	$5, 12			; $5 = 12 (shift count)		|@| 195 ($5=000C)
1:	shl	$1, $1, 1		; $1 <<= 1			|@| 196 ($1=FFFE)
	shr	$2, $2, 1		; $2 >>= 1			|@| 197 ($2=7FFF)
	as.z	$5, $5, -1		; dec 5, skip if zero		|@| 198 ($5=000B)
	jmp	1b			; loop
					;				|@| 242 ($1=F000 $2=000F $3=F8BD $5=0000)
	or	$1, $1, $2		; $1 = $1 | $2 (0xF00F)		|@| 243 ($1=F00F)
	and	$1, $1, $3		; $1 = $3 & $1 = 0xF00D		|@| 244 ($1=F00D)
					;
	add	$2, $0, 2		; $2 = 2			|@| 245 ($2=0002)
	add	$3, $2, 1		; $3 = 3			|@| 246 ($3=0003)
	add	$4, $3, 1		; $4 = 4			|@| 247 ($4=0004)
	add	$5, $4, 1		; $5 = 5			|@| 248 ($5=0005)
	add	$6, $0, -1		; $6 = -1			|@| 249 ($6=FFFF)
	add	$7, $0, 1		; $7 = 1			|@| 250 ($7=0001)
					;
	s.ne	$2, $3			; test skips			|@| 251 ($1=F00D)
	add	$1, $1, 1		; we shouldn't hit any adds
	s.gt	$7, $6			;				|@| 252 ($1=F00D)
	add	$1, $1, 1		;
	s.gte	$2, $7			;				|@| 253 ($1=F00D)
	add	$1, $1, 1		;
	s.lt	$4, $5			;				|@| 254 ($1=F00D)
	add	$1, $1, 1		;
	s.lte	$6, $2			;				|@| 255 ($1=F00D)
	add	$1, $1, 1		;
	s.ult	$7, $6			;				|@| 256 ($1=F00D)
	add	$1, $1, 1		;
	s.ulte	$7, $2			;				|@| 257 ($1=F00D)
	add	$1, $1, 1		;
					;
	jmp	0			;				|@| 258 ($1=F00D $cr0=0058)
					;
count_bits:				;				|@|  67 ($1=F171)
	.push	$1			; preserve $1			|@|  68 ($7=001F)
					;				<memory test>
	ldw	$1, 2($7)		; $1 = argument = 0xF171	|@|  69 ($1=F171)
	.push	$2			; preserve $2			|@|  71 ($7=001E)
					;				<memory test>
	.push	$3			; preserve $3			|@|  73 ($7=001D)
					;				<memory test>
	.push	$4			; preserve $4			|@|  75 ($7=001C)
					;				<memory test>
	add	$2, $0, $0		; $2 = 0			|@|  77 ($2=0000)
	.ldi	$4, 16			; $4 = 16 (bits)		|@|  79 ($4=0010)
1:	and	$3, $1, 1		; $3 = $1 & 1			|@|  80 ($3=0001)
	s.eq	$3, $0			; skip if 0
	add	$2, $2, 1		; inc $2			|@|  82 ($2=0001)
	shr	$1, $1, 1		; $1 = $1 >> 1			|@|  83 ($1=78B8)
	as.z	$4, $4, -1		; dec $4, skip when done	|@|  84 ($4=000F)
	jmp	1b			; loop				|@| 167 ($1=0000 $2=0009 $3=0001 $4=0000)
	.pop	$4			; restore $4			|@| 168 ($4=0000)
					;				|@| 169 ($7=001D)
	stw	4($7), $2		; result = $2 = 9		<memory test>
	.pop	$3			; restore $3			|@| 171 ($3=00FF)
					;				|@| 172 ($7=001E)
	.pop	$2			; restore $2			|@| 173 ($2=FFFF)
					;				|@| 174 ($7=001F)
	.pop	$1			; restore $1			|@| 175	($1=F171)
					;				|@| 176 ($7=0020)
	.pop	$5			; .ret				|@| 177 ($5=002D)
					;				|@| 178 ($7=0021)
	jmp	$5			;
